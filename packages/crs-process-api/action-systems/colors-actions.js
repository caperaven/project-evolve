class w{static async perform(a,t,s,e){await this[a.action]?.(a,t,s,e)}static async hex_to_rgb(a,t,s,e){const r=await crs.process.getValue(a.args.hex,t,s,e),c=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(r),l=c?{r:parseInt(c[1],16),g:parseInt(c[2],16),b:parseInt(c[3],16)}:null;return a.args.target!=null&&await crs.process.setValue(a.args.target,l,t,s,e),l}static async hex_to_rgba(a,t,s,e){const r=await crs.process.getValue(a.args.hex,t,s,e),c=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(r),l=c?{r:parseInt(c[1],16),g:parseInt(c[2],16),b:parseInt(c[3],16),a:parseInt(c[4],16)}:null;return a.args.target!=null&&await crs.process.setValue(a.args.target,l,t,s,e),l}static async hex_to_normalised(a,t,s,e){const r=await this.hex_to_rgba(a,t,s,e);return r.r=await crs.call("math","normalize",{value:r.r,min:0,max:255}),r.g=await crs.call("math","normalize",{value:r.g,min:0,max:255}),r.b=await crs.call("math","normalize",{value:r.b,min:0,max:255}),r.a=await crs.call("math","normalize",{value:r.a,min:0,max:255}),a.args.target!=null&&await crs.process.setValue(a.args.target,r,t,s,e),r}static async rgb_to_hex(a,t,s,e){const r=await crs.process.getValue(a.args.r,t,s,e)||0,c=await crs.process.getValue(a.args.g,t,s,e)||0,l=await crs.process.getValue(a.args.b,t,s,e)||0,n=["#",g(r),g(c),g(l)].join("");return a.args.target!=null&&await crs.process.setValue(a.args.target,n,t,s,e),n}static async rgba_to_hex(a,t,s,e){const r=await crs.process.getValue(a.args.r,t,s,e)||0,c=await crs.process.getValue(a.args.g,t,s,e)||0,l=await crs.process.getValue(a.args.b,t,s,e)||0,n=await crs.process.getValue(a.args.a,t,s,e)||255,i=["#",g(r),g(c),g(l),g(n)].join("");return a.args.target!=null&&await crs.process.setValue(a.args.target,i,t,s,e),i}static async rgb_text_to_hex(a,t,s,e){let r=await crs.process.getValue(a.args.value,t,s,e);r=r.replace("rgba(",""),r=r.replace("rgb(",""),r=r.replace(")","");const c=r.split(",");return await this.rgb_to_hex({args:{r:Number(c[0].trim()),g:Number(c[1].trim()),b:Number(c[2].trim())}},t,s,e)}static async css_to_hex(a,t,s,e){const r=await _(a,t,s,e,async c=>{if(c.indexOf("#")!=-1)return c.length==7?`${c}ff`:c;{c=c.replace("rgba(",""),c=c.replace("rgb(",""),c=c.replace(")","");const l=c.split(",");return await this.rgba_to_hex({args:{r:Number(l[0].trim()),g:Number(l[1].trim()),b:Number(l[2].trim()),a:l.length==3?255:Number(l[3].trim())}},t,s,e)}});return a.args.target!=null&&await crs.process.setValue(a.args.target,r,t,s,e),r}static async css_to_normalized(a,t,s,e){const r=await this.css_to_hex(a,t,s,e),c=Object.keys(r);for(const l of c){const n=r[l];r[l]=await this.hex_to_normalised({args:{hex:n}},t,s,e).catch(i=>console.error(error))}return a.args.target!=null&&await crs.process.setValue(a.args.target,r,t,s,e),r}}async function _(o,a,t,s,e){const r=await crs.dom.get_element(o.args.element),c=await crs.process.getValue(o.args.variables,a,t,s),l=getComputedStyle(r),n={};for(let i of c){const u=l.getPropertyValue(i).trim(),b=await e(u).catch(h=>console.error(h));n[i]=b}return n}function g(o){const a=o.toString(16);return a.length==1?"0"+a:a}crs.intent.colors=w;export{w as ColorsActions};

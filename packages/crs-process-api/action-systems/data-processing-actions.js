import n,{unique_values as u,filter as o,group as l,sort as w,get_perspective as V,init_panic_hook as f,aggregate as y}from"./../bin/data_processing.js";await n();class d{static async perform(a,r,s,t){await this[a.action](a,r,s,t)}static init_panic_hook(a,r,s,t){f()}static async aggregate(a,r,s,t){const g=await crs.process.getValue(a.args.source,r,s,t),c=await crs.process.getValue(a.args.intent,r,s,t),i=await crs.process.getValue(a.args.rows,r,s,t),e=y(g,c,i);return a.args.target&&await crs.process.setValue(a.args.target,e,r,s,t),e}static async unique_values(a,r,s,t){const g=await crs.process.getValue(a.args.source,r,s,t),c=await crs.process.getValue(a.args.fields,r,s,t),i=await crs.process.getValue(a.args.rows,r,s,t);if(!Array.isArray(g))throw new Error("Fields must be an array");if(!Array.isArray(c))throw new Error("Fields must be an array");const e=u(g,c,i);return a.args.target&&await crs.process.setValue(a.args.target,e,r,s,t),e}static async filter(a,r,s,t){const g=await crs.process.getValue(a.args.source,r,s,t),c=await crs.process.getValue(a.args.intent,r,s,t),i=await crs.process.getValue(a.args.case_sensitive??!1,r,s,t),e=o(g,c,i);return a.args.target&&await crs.process.setValue(a.args.target,e,r,s,t),e}static async group(a,r,s,t){const g=await crs.process.getValue(a.args.source,r,s,t),c=await crs.process.getValue(a.args.intent,r,s,t),i=await crs.process.getValue(a.args.rows,r,s,t),e=l(g,c,i);return a.args.target&&await crs.process.setValue(a.args.target,e,r,s,t),e}static async sort(a,r,s,t){const g=await crs.process.getValue(a.args.source,r,s,t),c=await crs.process.getValue(a.args.intent,r,s,t),i=await crs.process.getValue(a.args.rows,r,s,t),e=w(g,c,i);return a.args.target&&await crs.process.setValue(a.args.target,e,r,s,t),e}static async get_perspective(a,r,s,t){const g=await crs.process.getValue(a.args.source,r,s,t),c=await crs.process.getValue(a.args.intent,r,s,t),i=V(g,c);return a.args.target&&await crs.process.setValue(a.args.target,i,r,s,t),i}}crs.intent.data_processing=d;export{d as DataProcessing};

class m{static async perform(e,n,t,a){await this[e.action](e,n,t,a)}static async load(e,n,t,a){const r=await crs.process.getValue(e.args.dialog,n,t,a),l=await crs.process.getValue(e.args.return_content,n,t,a);if(r==!0){const s=await p(e);let o=[];for(const c of s){const u=await d(c.name);let f=c;l===!0&&(f=await y(c)),o.push({name:u.name,ext:u.ext,type:c.type,size:c.size,value:f})}return e.args.target!=null&&await crs.process.setValue(e.args.target,o,n,t,a),o}else{const s=await w(e,n,t,a);return e.args.target!=null&&await crs.process.setValue(e.args.target,s,n,t,a),s}}static async save(e,n,t,a){const r=await crs.process.getValue(e.args.details,n,t,a);let l=document.createElement("a");l.style.display="none",document.body.appendChild(l);for(let s of r){let o=new Blob([s.value],{type:s.type}),c=window.URL.createObjectURL(o);l.href=c,l.download=`${s.name}.${s.ext}`,l.click(),window.URL.revokeObjectURL(c),c=null,o=null}l.parentElement.removeChild(l),l=null}static async save_canvas(e,n,t,a){const r=await crs.dom.get_element(e.args.source),l=await crs.process.getValue(e.args.name,n,t,a)||"image",s=r.toDataURL("image/png");let o=document.createElement("a");o.style.display="none",document.body.appendChild(o),o.href=s.replace("image/png","image/octet-stream"),o.download=`${l}.png`,o.click(),o.parentElement.removeChild(o),o=null}static async enable_dropzone(e,n,t,a){const r=await crs.dom.get_element(e.args.element,n,t,a),l=await crs.process.getValue(e.args.handler,n,t,a),s=_.bind(this,l);r.addEventListener("drop",s),r.addEventListener("dragover",g),r.__dropHandler=s,r.__dragoverHandler=g}static async disable_dropzone(e,n,t,a){const r=await crs.dom.get_element(e.args.element,n,t,a);r.removeEventListener("drop",r.__dropHandler),r.removeEventListener("dragover",r.__dragoverHandler),delete r.__dropHandler,delete r.__dragoverHandler}}class h{static async blob(e){return new Promise(n=>{const t=new FileReader;t.onload=()=>{t.onload=null,n(t.result)},t.readAsArrayBuffer(e)})}}async function d(i){const e=i.split("/"),t=e[e.length-1].split("."),a=t[t.length-1];return{name:t[0],ext:a}}async function p(){return new Promise(i=>{let e=document.createElement("input");e.type="file",e.setAttribute("multiple","multiple"),e.onchange=()=>{e.onchange=null;const n=Array.from(e.files);i(n)},e.click()})}async function w(i,e,n,t){const a=await crs.process.getValue(i.args.files,e,n,t),r=[];for(const l of a){const s=await d(l);r.push({name:s.name,ext:s.ext,value:await fetch(l).then(o=>o.blob())})}return r}async function g(i){i.preventDefault()}async function _(i,e){e.preventDefault();const n=e.dataTransfer.files,t=[];for(const a of n){const r=await d(a.name);t.push({type:a.type,name:r.name,ext:r.ext,size:a.size,value:a})}i.call(this,t)}function y(i){return new Promise((e,n)=>{const t=new FileReader;t.onload=function(a){const r=a.target.result;e(r)},t.onerror=function(a){n(a.target.error)},t.readAsText(i)})}crs.intent.files=m;export{h as FileFormatter,m as FilesActions,d as get_file_name,w as get_files};

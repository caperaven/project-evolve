class r{#s={currentLevel:r.Levels.INFO,DEBUG:[],INFO:[],WARNING:[],ERROR:[],FATAL:[]};static Levels={DEBUG:"DEBUG",INFO:"INFO",WARNING:"WARNING",ERROR:"ERROR",FATAL:"FATAL"};static Order={DEBUG:1,INFO:2,WARNING:3,ERROR:4,FATAL:5};get logs(){return this.#s}#e(s,e){if(r.Order[s]>=r.Order[this.#s.currentLevel]){const t=`[${new Date().toISOString()}] ${s}: ${e}`;this.#s[s].push(t)}}async debug(s,e,t,a){const c=await crs.process.getValue(s.args.message,e,t,a);this.#e(r.Levels.DEBUG,c)}async info(s,e,t,a){const c=await crs.process.getValue(s.args.message,e,t,a);this.#e(r.Levels.INFO,c)}async warning(s,e,t,a){const c=await crs.process.getValue(s.args.message,e,t,a);this.#e(r.Levels.WARNING,c)}async error(s,e,t,a){const c=await crs.process.getValue(s.args.message,e,t,a);this.#e(r.Levels.ERROR,c)}async fatal(s,e,t,a){const c=await crs.process.getValue(s.args.message,e,t,a);this.#e(r.Levels.FATAL,c)}async clear(){this.#s.DEBUG=[],this.#s.INFO=[],this.#s.WARNING=[],this.#s.ERROR=[]}async has_errors(s,e,t,a){return this.#s.ERROR.length>0||this.#s.FATAL.length>0}async has_fatal_errors(s,e,t,a){return this.#s.FATAL.length>0}async print(){return console.log(this.#s),this.#s}async set_level(s,e,t,a){this.#s.currentLevel=await crs.process.getValue(s.args.level||"INFO",e,t,a)}}crs.intent.logger=new r;export{r as LoggerActions};

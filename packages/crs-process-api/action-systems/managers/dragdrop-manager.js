import{ensureOptions as n}from"./dragdrop-manager/options.js";import{applyPlaceholder as l}from"./dragdrop-manager/placeholder.js";import{drop as a,allowDrop as o}from"./dragdrop-manager/drop.js";import{startDrag as u,updateDrag as d}from"./dragdrop-manager/drag.js";import{getDraggable as m}from"./dragdrop-manager/drag-utils.js";import{updateMarker as p}from"./dragdrop-manager/marker.js";import{startMarker as g}from"./dragdrop-manager/marker.js";import{getMouseInputMap as c,clientX as h,clientY as r}from"./input-mapping.js";class H{#d;#t;#l;#m;#a;#i;#h;#s;#p;#g;#c;#f;#r;#v;#o;#u;#D=[];#n;#e;get element(){return this.#t}get updateDragHandler(){return this.#o}get updateMarkerHandler(){return this.#u}get dragElement(){return this.#i}get movePoint(){return this.#r}get startPoint(){return this.#f}get target(){return this.#l}get marker(){return this.#h}get lastTarget(){return this.#m}set lastTarget(t){this.#m=t}get boundsCache(){return this.#D}get composedPath(){return this.#n}constructor(t,s){this.#t=t,this.#t.style.userSelect="none",this.#s=n(s),this.#p=this.#w.bind(this),this.#g=this.#M.bind(this),this.#c=this.#P.bind(this),this.#e=c(),this.#d=this.#t.shadowRoot==null?this.#t:this.#t.shadowRoot,this.#d.addEventListener(this.#e.mousedown,this.#p,{passive:!1}),this.#t.__dragDropManager=this}dispose(){this.#d.removeEventListener(this.#e.mousedown,this.#p),this.#d=null,this.#t=null,this.#m=null,this.#s=null,this.#p=null,this.#g=null,this.#c=null,this.#f=null,this.#r=null,this.#a=null,this.#i=null,this.#v=null,this.#o=null,this.#u=null,this.#l=null,this.#h=null,this.#n=null,this.#D=null,this.#e=null}async#w(t){if(t.preventDefault(),this.#n=t.composedPath(),this.#v==!0)return;const s=h(t),i=r(t);this.#f={x:s,y:i},this.#r={x:s,y:i};const e=m(t,this.#s);e!=null&&(this.#t.dataset.dragging=!0,this.#a=await l(e,this.#s),this.#i=await u(e,this.#s),this.#l=this.#a,document.addEventListener(this.#e.mousemove,this.#g,{passive:!1}),document.addEventListener(this.#e.mouseup,this.#c,{passive:!1}),this.#o=d.bind(this),this.#o(),this.#h=await g.call(this,this.#i),this.#u=p.bind(this),this.#u())}async#M(t){t.preventDefault(),this.#n=t.composedPath(),this.#r.x=h(t),this.#r.y=r(t),this.#l=t.target||t.composedPath()[0]}async#P(t){this.#v=!0,t.preventDefault(),this.#n=t.composedPath(),this.#o=null,this.#u=null,this.#r=null,this.#f=null,document.removeEventListener(this.#e.mousemove,this.#g),document.removeEventListener(this.#e.mouseup,this.#c),this.#h&&(this.#h.remove(),this.#h=null),await a.call(this,this.#i,this.#a,this.#s),this.#i=null,this.#a=null,this.#l=null,this.#v=!1,this.#m=null;for(const s of this.#D)s._bounds=null;this.#D.length=0,delete this.#s.currentAction,this.#n=null,delete this.#t.dataset.dragging}async validateDropTarget(t){return this.#s.currentAction="hover",o.call(this,t,this.#s)}}export{H as DragDropManager};

class r{#e;#i;#s;#t;#a=!1;#n=this.#l.bind(this);#r;get definition(){return this.#i}get routeDefinition(){return Object.freeze(this.#t)}constructor(t,s,e,i){this.#e=t,this.#i=s,this.#s=i,this.#r=e,this.goto(window.location.href).then(()=>{addEventListener("popstate",this.#n)})}dispose(){removeEventListener("popstate",this.#n),this.#e=null,this.#i=null,this.#s=null,this.#t=null,this.#n=null,this.#a=null,this.#r=null}async#l(t){t.preventDefault(),this.#t=await crs.call("route","parse",{url:window.location.href}),await this.#s?.(this.#t)}async goto(t){typeof t=="string"&&(t=await crs.call("route","parse",{url:t})),this.#t=t,(this.#t.params.view==null||this.#t.params.view==="")&&(this.#t.params.view=this.#r);const s=this.#e.find(i=>i.view===this.#t.params.view);if(s==null){console.error("Route not found");return}const e=await crs.call("route","create_url",{definition:this.#t});history.pushState(null,null,e),await this.#s?.(this.#t,s.title)}async refresh(){return new Promise(async t=>{await this.#s?.(this.#t),t()})}setParameters(t){if(this.#t!=null)for(const s of Object.keys(t))this.#t.params[s]=t[s]}setQueries(t){if(this.#t!=null)for(const s of Object.keys(t))this.#t.query[s]=t[s]}}export{r as RouteManager};

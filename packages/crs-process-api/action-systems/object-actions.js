class f{static async perform(s,r,t,a){return await this[s.action](s,r,t,a)}static async set(s,r,t,a){const e=await crs.process.getValue(s.args.properties,r,t,a),c=Object.keys(e);for(let n of c){const l=await crs.process.getValue(e[n],r,t,a);n=u(n),await crs.process.setValue(n,l,r,t,a)}}static async get(s,r,t,a){const e=await crs.process.getValue(s.args.properties,r,t,a),c=[];for(let n of e){n=u(n);const l=await crs.process.getValue(n,r,t,a);c.push(l)}return s.args.target!=null&&await crs.process.setValue(s.args.target,c,r,t,a),c}static async delete(s,r,t,a){const e=await crs.process.getValue(s.args.properties,r,t,a);for(let c of e){c=u(c);let n=r;c.indexOf("$process")!=-1&&(n=t),c.indexOf("$item")!=-1&&(n=a),await w(n,c)}}static async copy_on_path(s,r,t,a){const e=await crs.process.getValue(s.args.source,r,t,a),c=await crs.process.getValue(s.args.target,r,t,a),n=await crs.process.getValue(s.args.properties,r,t,a);for(let l of n)l=l.split("/").join("."),await y(e,c,l)}static async create(s,r,t,a){s.args.target!=null&&await crs.process.setValue(s.args.target,{},r,t,a)}static async assign(s,r,t,a){const e=await crs.process.getValue(s.args.source,r,t,a),c=await crs.process.getValue(s.args.target,r,t,a);return Object.assign(c,e)}static async clone(s,r,t,a){const e=await crs.process.getValue(s.args.source,r,t,a),c=await crs.process.getValue(s.args.properties,r,t,a);if(c==null){const l=Object.assign({},e);return s.args.target!=null&&await crs.process.setValue(s.args.target,l,r,t,a),l}const n={};for(let l of c)n[l]=e[l];return s.args.target!=null&&await crs.process.setValue(s.args.target,n,r,t,a),n}static async json_clone(s,r,t,a){const e=await crs.process.getValue(s.args.source,r,t,a),c=JSON.stringify(e),n=JSON.parse(c);return s.args.target!=null&&await crs.process.setValue(s.args.target,n,r,t,a),n}static async assert(s,r,t,a){let e=!0;const c=await crs.process.getValue(s.args.source,r,t,a);if(c==null)return!1;const n=await crs.process.getValue(s.args.properties,r,t,a);for(const l of n)if(await g(c,l)==null){e=!1;break}return s.args.target!=null&&await crs.process.setValue(s.args.target,e,r,t,a),e}}function u(o){return o.indexOf("$")==-1&&(o=`$context.${o}`),o.split("/").join(".")}async function p(o,s,r){const t=s.split(".").join("/").split("/"),a=t[t.length-1];let e=o;for(let c=0;c<t.length-1;c++){const n=t[c],l=t[c+1],i=isNaN(l)==!1;i==!0&&(t[c+1]=Number(l)),e[n]==null&&(e[n]=i?[]:{}),e=e[n]}e[a]=r}async function g(o,s){const r=s.split(".").join("/").split("/"),t=r[r.length-1];let a=o;for(let e=0;e<r.length-1;e++){if(a==null)return null;Array.isArray(a)?a=a[Number(r[e])]:a=a[r[e]]}return a==null?null:a[t]}async function w(o,s){if(o==null)return;const r=s.replace(/\$context\.|\$process\.|\$item\./g,"").replace(/\./g,"/").split("/");let t=o;const a=[o];for(let n=0;n<r.length;n++){const l=r[n];if(t[l]==null)return;t=t[l],a.push(t)}const e=r.length-1,c=r[e];t=a[e],Array.isArray(t)?t.splice(Number(c),1):delete t[c]}async function y(o,s,r){const t=await g(o,r);if(t==null)return;const a=await crs.call("object","json_clone",{source:t});await p(s,r,a)}crs.intent.object=f;export{f as ObjectActions};

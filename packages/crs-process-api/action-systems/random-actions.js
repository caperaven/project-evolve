class o{static async perform(a,r,t,s){return await this[a.action](a,r,t,s)}static async generate_object(a,r,t,s){const e=await crs.process.getValue(a.args.definition,r,t,s),n={};for(let[g,i]of Object.entries(e)){let l=i.split(":");const u=l[0];switch(l.splice(0,1),u){case"auto":{n[g]=a.args.auto;break}case"string":{n[g]=await o.string({args:{length:l[0]}},r,t,s);break}case"integer":{n[g]=await o.integer({args:{min:l[0],max:l[1]}},r,t,s);break}case"float":{n[g]=await o.float({args:{min:l[0],max:l[1]}},r,t,s);break}case"date":{n[g]=await o.date({args:{min:l[0],max:l[1]}},r,t,s);break}case"time":{n[g]=await o.time({args:{}},r,t,s);break}case"duration":{n[g]=await o.duration({args:{}},r,t,s);break}case"boolean":n[g]=await o.boolean({args:{}},r,t,s);case"uuid":{n[g]=crypto.randomUUID();break}}}return a.args.target!=null&&await crs.process.setValue(a.args.target,n,r,t,s),n}static async generate_collection(a,r,t,s){const e=await crs.process.getValue(a.args.definition,r,t,s),n=await crs.process.getValue(a.args.count,r,t,s),g=[];for(let i=0;i<n;i++)g.push(await o.generate_object({args:{auto:i,definition:e}},r,t,s));return a.args.target!=null&&await crs.process.setValue(a.args.target,g,r,t,s),g}static async integer(a,r,t,s){let e=Math.floor(Math.random()*(a.args.max-a.args.min+1))+a.args.min;return a.args?.target!=null&&await crs.process.setValue(a.args.target,e,r,t,s),e}static async float(a,r,t,s){let e=Math.random()*(a.args.max-a.args.min+1)+a.args.min;return a.args?.target!=null&&await crs.process.setValue(a.args.target,e,r,t,s),e}static async string(a,r,t,s){let e=await crs.process.getValue(a.args.length,r,t,s);e=="auto"&&(e=Math.floor(Math.random()*(20-1))+0);let n=Math.random().toString(36).substring(2,Number(e)+2);return a.args?.target!=null&&await crs.process.setValue(a.args.target,n,r,t,s),n}static async date(a,r,t,s){const e=await crs.process.getValue(a.args.min,r,t,s),n=await crs.process.getValue(a.args.max,r,t,s),g=new Date(e),i=new Date(n);let l=new Date(g.getTime()+Math.random()*(i.getTime()-g.getTime()));return a.args?.target!=null&&await crs.process.setValue(a.args.target,l,r,t,s),l}static async time(a,r,t,s){const e=Math.floor(Math.random()*24),n=Math.floor(Math.random()*60),g=Math.floor(Math.random()*60),i=`${e}:${n}:${g}`;return a.args?.target!=null&&await crs.process.setValue(a.args.target,i,r,t,s),i}static async duration(a,r,t,s){const e=Math.floor(Math.random()*365),n=Math.floor(Math.random()*24),g=Math.floor(Math.random()*60),i=Math.floor(Math.random()*60),l=`P${e}DT${n}H${g}M${i}S`;return a.args?.target!=null&&await crs.process.setValue(a.args.target,l,r,t,s),l}static async boolean(a,r,t,s){let e=Math.random()>=.5;return a.args?.target!=null&&await crs.process.setValue(a.args.target,e,r,t,s),e}}crs.intent.random=o;export{o as RandomActions};

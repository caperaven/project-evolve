class d{static async perform(a,t,r,s){await this[a.action]?.(a,t,r,s)}static async inflate(a,t,r,s){if(a.args.parameters==null)return a.args.template;let l=a.args.template,n=a.args.parameters,e=await _(l,n,t,r,s);return e.indexOf("&{")!=-1&&(e=f(e)),a.args.target!=null&&await crs.process.setValue(a.args.target,e,t,r,s),e}static async translate(a,t,r,s){let n=await crs.process.getValue(a.args.template,t,r,s);return n.indexOf("&{")!=-1&&(n=f(n)),a.args.target!=null&&await crs.process.setValue(a.args.target,n,t,r,s),n}static async to_array(a,t,r,s){let n=(await crs.process.getValue(a.args.source,t,r,s)).split(a.args.pattern);return a.args.target!=null&&await crs.process.setValue(a.args.target,n,t,r,s),n}static async from_array(a,t,r,s){let l=await crs.process.getValue(a.args.source,t,r,s),n=a.args.separator||"",e=l.join(n);return a.args.target!=null&&await crs.process.setValue(a.args.target,e,t,r,s),e}static async replace(a,t,r,s){let l=await crs.process.getValue(a.args.source,t,r,s);const n=await crs.process.getValue(a.args.pattern,t,r,s),e=await crs.process.getValue(a.args.value,t,r,s);let g=l.split(n).join(e);return a.args.target!=null&&await crs.process.setValue(a.args.target,g,t,r,s),g}static async get_query_string(a,t,r,s){const l=await crs.process.getValue(a.args.source,t,r,s),n=await crs.process.getValue(a.args.complex_parameters,t,r,s);if((l||"").trim()==="")return;let e;const g=l.includes("?")?l.split("?")[1]:l,u=new URLSearchParams(g);for(const[c,o]of u)if(!((c||"").trim()===""||(o||"").trim()==="")){if((n||[]).includes(c)){const y=o.split(";");for(const V of y){const w=await this.get_query_string({args:{source:V}});w!=null&&(e=e||{},e[c]=e[c]||{},Object.assign(e[c],w))}continue}e=e||{},e[c]=o}return a.args.target!=null&&e!=null&&await crs.process.setValue(a.args.target,e,t,r,s),e}static async template(a,t,r,s){let l=await crs.process.getValue(a.args.template,t,r,s);const n=await crs.process.getValue(a.args.options,t,r,s);for(const e of Object.keys(n))l=l.replaceAll(`__${e}__`,n[e]);return a.args.target!=null&&await crs.process.setValue(a.args.target,l,t,r,s),l}static async slice(a,t,r,s){const l=await crs.process.getValue(a.args.value,t,r,s),n=await crs.process.getValue(a.args.index||0,t,r,s),e=await crs.process.getValue(a.args.length,t,r,s),g=await crs.process.getValue(a.args.overflow||null,t,r,s),u=n+e;let c=l.substring(n,u);return g==="ellipsis"&&l.length>c.length&&(c=`${c.substring(0,e-3)}...`),a.args.target!=null&&await crs.process.setValue(a.args.target,c,t,r,s),c}}async function _(i,a,t,r,s){i=i.split("${").join("${context.");const l=await m(a,t,r,s);let n=new Function("context",["return `",i,"`;"].join("")),e=n(l);return n=null,e}async function m(i,a,t,r){const s=Object.keys(i),l={};for(let n of s){let e=i[n];l[n]=await crs.process.getValue(e,a,t,r)}return l}async function f(i){const a=i.indexOf("&{"),t=i.indexOf("}",a+1),r=i.substring(a+2,t),s=await crs.binding.translations.get(r);return i=i.split(`&{${r}}`).join(s),i.indexOf("&{")!=-1?f(i):i}crs.intent.string=d;export{d as StringActions};
